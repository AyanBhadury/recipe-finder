{"version":3,"sources":["components/recipe.module.css","components/RecipeLists.js","components/RecipeFinder.js","components/RecipeContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","RecipeLists","title","image","ingredients","calories","className","style","recipe","src","alt","map","ingredient","index","key","RecipeFinder","useState","recipes","setRecipes","label","setLabel","query","setQuery","URL","process","a","axios","get","crossdomain","response","data","hits","console","error","useEffect","getData","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","ingredientLines","toFixed","RecipeContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,OAAS,yB,yOCiBZC,MAhBf,YAA0D,IAApCC,EAAmC,EAAnCA,MAAMC,EAA6B,EAA7BA,MAAMC,EAAuB,EAAvBA,YAAYC,EAAW,EAAXA,SAC1C,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKN,GACL,4BAAKG,EAAL,aACA,yBAAKI,IAAON,EAAOO,IAAI,KACvB,4BACKN,EAAYO,KAAI,SAACC,EAAWC,GAAZ,OACb,wBAAIC,IAAKD,GAAQD,SCqCtBG,MA5Cf,WACI,IADoB,EAGUC,mBAAS,IAHnB,mBAGbC,EAHa,KAGJC,EAHI,OAIMF,mBAAS,IAJf,mBAIbG,EAJa,KAINC,EAJM,OAKMJ,mBAAS,WALf,mBAKbK,EALa,KAKNC,EALM,KAMdC,EAAG,0CAAsCF,EAAtC,mBALMG,WAKN,oBAJOA,oCAFI,4CAQpB,4BAAAC,EAAA,+EAE+BC,IAAMC,IAAIJ,EAAK,CAAEK,aAAa,IAF7D,OAEcC,EAFd,OAGQX,EAAWW,EAASC,KAAKC,MAHjC,gDAMQC,QAAQC,MAAR,MANR,0DARoB,sBA4BpB,OAVAC,qBAAU,YAlBU,mCAmBhBC,KAED,CAACd,IAQA,oCACI,0BAAMe,SAPE,SAACC,GACbA,EAAEC,iBACFhB,EAASH,IAKoBb,UAAU,eAC/B,2BAAOA,UAAU,aAAaiC,KAAK,OAAOC,YAAY,4BAA4BC,MAAOtB,EAAOuB,SAAU,SAACL,GAAQjB,EAASiB,EAAEM,OAAOF,UACrI,4BAAQnC,UAAU,gBAAgBiC,KAAK,UAAvC,WAEJ,yBAAKjC,UAAU,WACdW,EAAQN,KAAI,SAAAH,GAAM,OACf,kBAAC,EAAD,CAAaM,IAAKN,EAAOA,OAAOL,MAAOD,MAAOM,EAAOA,OAAOW,MAAOhB,MAAOK,EAAOA,OAAOL,MAAOC,YAAaI,EAAOA,OAAOoC,gBAAiBvC,SAAUG,EAAOA,OAAOH,SAASwC,QAAQ,WC3BrLC,MATf,WACI,OACI,6BACI,yBAAKxC,UAAU,iBAAf,iBACA,kBAAC,EAAD,QCKGyC,MARf,WACE,OACE,yBAAKzC,UAAU,OACd,kBAAC,EAAD,QCKe0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLD,QAAQC,MAAMA,EAAMgC,c","file":"static/js/main.14d84efe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2Sjwx\"};","import React from 'react'\r\nimport style from '../components/recipe.module.css';\r\nfunction RecipeLists({title,image,ingredients,calories}) {\r\n    return (\r\n        <div className={style.recipe}>\r\n            <h2>{title}</h2>\r\n            <h5>{calories} Calories</h5>\r\n            <img src = {image} alt='' />\r\n            <ol>\r\n                {ingredients.map((ingredient,index)=>(\r\n                    <li key={index}>{ingredient}</li>\r\n                ))}\r\n            </ol>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipeLists\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport RecipeLists from './RecipeLists';\r\nfunction RecipeFinder() {\r\n    const API_ID = process.env.REACT_APP_API_ID;\r\n    const API_KEY = process.env.REACT_APP_API_KEY;\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [label, setLabel] = useState('');\r\n    const [query, setQuery] = useState('chicken');\r\n    const URL = `https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}`;\r\n\r\n    async function getData() {\r\n        try {\r\n            const response = await axios.get(URL, { crossdomain: true });\r\n            setRecipes(response.data.hits);\r\n          //  console.log(response.data.hits);\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [query])\r\n\r\n    const getFood = (e) => {\r\n        e.preventDefault();\r\n        setQuery(label)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={getFood} className=\"search-form\" >\r\n                <input className=\"search-bar\" type=\"text\" placeholder=\"Enter the main ingredient\" value={label} onChange={(e) => { setLabel(e.target.value) }}></input>\r\n                <button className=\"search-button\" type=\"submit\">Search</button>\r\n            </form>\r\n            <div className=\"recipes\">\r\n            {recipes.map(recipe => (\r\n                <RecipeLists key={recipe.recipe.image} title={recipe.recipe.label} image={recipe.recipe.image} ingredients={recipe.recipe.ingredientLines} calories={recipe.recipe.calories.toFixed(2)} />\r\n            ))}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RecipeFinder\r\n","import React from 'react'\r\nimport RecipeFinder from './RecipeFinder'\r\n\r\nfunction RecipeContainer() {\r\n    return (\r\n        <div>\r\n            <div className=\"recipe-header\">Recipe Finder</div>\r\n            <RecipeFinder />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecipeContainer\r\n","import React from 'react';\nimport './App.css';\nimport RecipeContainer from './components/RecipeContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <RecipeContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}